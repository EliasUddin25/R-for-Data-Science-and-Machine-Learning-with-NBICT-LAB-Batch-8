5+5
23+56
23+56
-> 23+56
data = c(9, 6, 17, 31, 11)
mean(data)
summary(data)
setwd("C:/Users/elias/OneDrive/Data Science and Machine Learning/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-43 ðŸ‘‰ Two-way ANOVA in R (Part-5)")
install.packages(c(
"tidyverse","car","emmeans","effectsize","performance",
"broom","broom.helpers","kableExtra","multcomp","multcompView","patchwork"
))
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
options(contrasts = c("contr.sum","contr.poly"))
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
cat("\nCell counts (balance check):\n")
print(with(d, table(fert, irr)))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means Â± 95% CI by Fertilizer Ã— Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
m <- aov(y ~ fert * irr, data = d)
summary(m)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
## â”€â”€ 4) Model diagnostics & assumptions ----
# Visual checks
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))  # plots/flags common issues
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))  # plots/flags common issues
fert_within_irr <- contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
cat("\nPairwise fert within each irr:\n"); print(fert_within_irr)
irr_within_fert <- contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
cat("\nPairwise irr within each fert:\n"); print(irr_within_fert)
emm_fert <- emmeans(m, ~ fert)
emm_irr  <- emmeans(m, ~ irr)
cat("\nMain effects (fert):\n"); print(contrast(emm_fert, "tukey"))
cat("\nMain effects (irr):\n");  print(contrast(emm_irr,  "tukey"))
cld_letters <- multcomp::cld(emm_int, Letters = letters, adjust = "tukey")
emm_df <- as.data.frame(cld_letters)
library(effectsize)
eta_squared(m, partial = FALSE, alternative="two.sided")
eta_squared(m, partial = TRUE)
omega_squared(m)
## â”€â”€ 0) Setup ----
install.packages(c(
"tidyverse","car","emmeans","effectsize","performance",
"broom","broom.helpers","kableExtra","multcomp","multcompView","patchwork"
))
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
# Recommended for Type-III SS (sum-to-zero contrasts)
options(contrasts = c("contr.sum","contr.poly"))
theme_set(theme_classic(base_size = 12))
## â”€â”€ 1) Import & basic hygiene ----
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
# Coerce types safely
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
# Quick design sanity checks
cat("\nCell counts (balance check):\n")
print(with(d, table(fert, irr)))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
## â”€â”€ 2) EDA: raw + summary plots ----
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means Â± 95% CI by Fertilizer Ã— Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
## â”€â”€ 3) Fit model ----
# Type-III ANOVA is robust for unbalanced data (given contr.sum above)
m <- aov(y ~ fert * irr, data = d)
summary(m)
# Publication-ready ANOVA (Type III)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
## â”€â”€ 4) Model diagnostics & assumptions ----
# Visual checks
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
# Targeted tests (use as guidance, not hard gates)
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
# Comprehensive diagnostics (performance)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))  # plots/flags common issues
